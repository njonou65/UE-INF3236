{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aHLvbXKY0USg"
      },
      "source": [
        "# TP6 - NEURAL NETWORK\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "o4ebDibBiquS",
        "outputId": "e1186040-6eb9-4624-de1a-b87eb9638215"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "X = np.arange(0,7)\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "ax.plot(3.5, 1.8, \"or\", color=\"green\", markersize=15)\n",
        "ax.plot(1.1, 3.9, \"oy\", color=\"red\", markersize=15)\n",
        "\n",
        "point_on_line = (4, 4.5)\n",
        "# Calcul du gradient:\n",
        "m = point_on_line[1] / point_on_line[0]\n",
        "ax.plot(X, m*X, \"b-\", linewidth=3)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "id": "KCeXMftkAge_",
        "outputId": "bec6291e-a697-4531-81ee-b6e3e5cfe1c5"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def create_distance_function(a, b, c):\n",
        "  \"\"\" 0 = ax + by + c \"\"\"\n",
        "  def distance(x, y):\n",
        "    \"\"\"\n",
        "    returns tuple (d, pos)\n",
        "    d is the distance\n",
        "    FROM DIVIDING LINES TO NEURAL NETWORKS\n",
        "    98If pos == -1 point is below the line,\n",
        "    0 on the line and +1 if above the line\n",
        "    \"\"\"\n",
        "    nom = a * x + b * y + c\n",
        "    if nom == 0:\n",
        "      pos = 0\n",
        "    elif (nom<0 and b<0) or (nom>0 and b>0):\n",
        "      pos = -1\n",
        "    else:\n",
        "      pos = 1\n",
        "    return (np.absolute(nom) / np.sqrt( a ** 2 + b ** 2), pos)\n",
        "  return distance\n",
        "\n",
        "orange = (4.5, 1.8)\n",
        "lemon = (1.1, 3.9)\n",
        "fruits_coords = [orange, lemon]\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "ax.set_xlabel(\"sweetness\")\n",
        "ax.set_ylabel(\"sourness\")\n",
        "x_min, x_max = -1, 7\n",
        "y_min, y_max = -1, 8\n",
        "ax.set_xlim([x_min, x_max])\n",
        "ax.set_ylim([y_min, y_max])\n",
        "X = np.arange(x_min, x_max, 0.1)\n",
        "\n",
        "step = 0.05\n",
        "for x in np.arange(0, 1+step, step):\n",
        "  slope = np.tan(np.arccos(x))\n",
        "  dist4line1 = create_distance_function(slope, -1, 0)\n",
        "  Y = slope * X\n",
        "  results = []\n",
        "  for point in fruits_coords:\n",
        "    results.append(dist4line1(*point))\n",
        "  if (results[0][1] != results[1][1]):\n",
        "    ax.plot(X, Y, \"b-\", linewidth=0.8, alpha=0.9)\n",
        "  else:\n",
        "    ax.plot(X, Y, \"m-\", linewidth=0.8, alpha=0.9)\n",
        "  \n",
        "size = 10\n",
        "for (index, (x, y)) in enumerate(fruits_coords):\n",
        "  if index== 0:\n",
        "    ax.plot(x, y, \"o\",\n",
        "            color=\"darkred\",\n",
        "            markersize=size)\n",
        "  else:\n",
        "    ax.plot(x, y, \"oy\", color=\"darkgreen\",\n",
        "            markersize=size)\n",
        "    \n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "jRc3rKQ7K5nW",
        "outputId": "9d720211-7d73-4911-b507-b8ec519a90cd"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def points_within_circle(radius,\n",
        "                         center=(0, 0),\n",
        "                         number_of_points=100):\n",
        "  center_x, center_y = center\n",
        "  r = radius * np.sqrt(np.random.random((number_of_points,)))\n",
        "  theta = np.random.random((number_of_points,)) * 2 * np.pi\n",
        "  x = center_x + r * np.cos(theta)\n",
        "  y = center_y + r * np.sin(theta)\n",
        "  return x, y\n",
        "\n",
        "X = np.arange(0, 8)\n",
        "fig, ax = plt.subplots()\n",
        "oranges_x, oranges_y = points_within_circle(1.6, (5, 2), 100)\n",
        "lemons_x, lemons_y = points_within_circle(1.9, (2, 5), 100)\n",
        "\n",
        "ax.scatter(oranges_x,\n",
        "           oranges_y,\n",
        "           c=\"red\",\n",
        "           label=\"oranges\")\n",
        "\n",
        "ax.scatter(lemons_x,\n",
        "           lemons_y,\n",
        "           c=\"darkgreen\",\n",
        "           label=\"lemons\")\n",
        "\n",
        "ax.plot(X, 0.9 * X, \"b-\", linewidth=2)\n",
        "ax.legend()\n",
        "ax.grid()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "LV79FGeZK5rS",
        "outputId": "38f09bae-7633-438d-f54d-3892d0f9ade1"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.8999999999999999\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from itertools import repeat\n",
        "from random import shuffle\n",
        "\n",
        "\n",
        "X = np.arange(0, 8)\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(oranges_x,\n",
        "           oranges_y,\n",
        "           c=\"orange\",\n",
        "           label=\"oranges\")\n",
        "ax.scatter(lemons_x,\n",
        "           lemons_y,\n",
        "           c=\"y\",\n",
        "           label=\"lemons\")\n",
        "\n",
        "fruits = list(zip(oranges_x,\n",
        "                  oranges_y,\n",
        "                  repeat(0, len(oranges_x))))\n",
        "fruits += list(zip(lemons_x,\n",
        "                   lemons_y,\n",
        "                   repeat(1, len(oranges_x))))\n",
        "shuffle(fruits)\n",
        "def adjust(learning_rate=0.3, slope=0.3):\n",
        "  line = None\n",
        "  counter = 0\n",
        "  for x, y, label in fruits:\n",
        "    res = slope * x - y\n",
        "    #print(label, res)\n",
        "    if label == 0 and res < 0:\n",
        "      # point is above line but should be below\n",
        "      # => increment slope\n",
        "      slope += learning_rate\n",
        "      counter += 1\n",
        "      ax.plot(X, slope * X,\n",
        "              linewidth=2,\n",
        "              label=str(counter))\n",
        "    elif label == 1 and res > 0:\n",
        "      # point is below line but should be above\n",
        "      # => decrement slope\n",
        "      #print(res, label)\n",
        "      slope -= learning_rate\n",
        "      counter += 1\n",
        "      ax.plot(X, slope * X,\n",
        "              linewidth=2,\n",
        "              label=str(counter))\n",
        "  return slope\n",
        "\n",
        "slope = adjust()\n",
        "ax.plot(X,\n",
        "        slope * X,\n",
        "        linewidth=2)\n",
        "ax.legend()\n",
        "ax.grid()\n",
        "plt.show()\n",
        "\n",
        "print(slope)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "BZBGGmaEAgmw",
        "outputId": "00084537-878c-4302-e9bd-e59122f6553c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.9999999999999996\n"
          ]
        }
      ],
      "source": [
        "X = np.arange(0, 8)\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(oranges_x,\n",
        "           oranges_y,\n",
        "           c=\"orange\",\n",
        "           label=\"oranges\")\n",
        "ax.scatter(lemons_x,\n",
        "           lemons_y,\n",
        "           c=\"y\",\n",
        "           label=\"lemons\")\n",
        "slope = adjust(learning_rate=0.2, slope=3)\n",
        "ax.plot(X,\n",
        "        slope * X,\n",
        "        linewidth=2)\n",
        "ax.legend()\n",
        "ax.grid()\n",
        "plt.show()\n",
        "\n",
        "print(slope)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OIAKQic9OdqT",
        "outputId": "79394269-2a4c-4f6f-fefc-2ab3ac4f08cd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-1.6647210127263314, -1.5163223853366024, -1.2508455310853244, -2.180278532069539, -0.6904646567260035, -0.7204492014908381, -0.4892706649410661, -0.9885669624259454, -2.3191298425426243, -0.5773067888496723, 2.6623686679954024, 0.6222021787546441, 0.3946277069112376, 1.8255865909102604, 1.6702788648722517, 2.4756461008659056, 0.5948867852054087, 0.6638989768327295, 2.630596947627632, 2.5705974543825203, "
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "class Perceptron:\n",
        "  def __init__(self, weights):\n",
        "    \"\"\"\n",
        "    'weights' can be a numpy array, list or a tuple with the\n",
        "    actual values of the weights. The number of input values\n",
        "    is indirectly defined by the length of 'weights'\n",
        "    \"\"\"\n",
        "    self.weights = np.array(weights)\n",
        "\n",
        "  def __call__(self, in_data):\n",
        "    weighted_input = self.weights * in_data\n",
        "    weighted_sum = weighted_input.sum()\n",
        "    return weighted_sum\n",
        "\n",
        "p = Perceptron(weights=[-0.45, 0.5])\n",
        "\n",
        "for point in zip(oranges_x[:10], oranges_y[:10]):\n",
        "  res = p(point)\n",
        "  print(res, end=\", \")\n",
        "for point in zip(lemons_x[:10], lemons_y[:10]):\n",
        "  res = p(point)\n",
        "  print(res, end=\", \")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WXwVS8IsUM00",
        "outputId": "26b347a9-0c93-409d-96df-8cbd74c3e50c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Counter({'corrects': 200})\n"
          ]
        }
      ],
      "source": [
        "from collections import Counter\n",
        "\n",
        "evaluation = Counter()\n",
        "for point in zip(oranges_x, oranges_y):\n",
        "  res = p(point)\n",
        "  if res < 0:\n",
        "    evaluation['corrects'] += 1\n",
        "  else:\n",
        "    evaluation['wrongs'] += 1\n",
        "for point in zip(lemons_x, lemons_y):\n",
        "  res = p(point)\n",
        "  if res >= 0:\n",
        "    evaluation['corrects'] += 1\n",
        "  else:\n",
        "    evaluation['wrongs'] += 1\n",
        "\n",
        "print(evaluation)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "DWwl2hneOd38",
        "outputId": "c1f000e5-d11f-4426-b79f-810cadca30ed"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.9\n"
          ]
        }
      ],
      "source": [
        "import time\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "slope = 0.1\n",
        "\n",
        "X = np.arange(0, 8)\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(oranges_x,\n",
        "           oranges_y,\n",
        "           c=\"orange\",\n",
        "           label=\"oranges\")\n",
        "ax.scatter(lemons_x,\n",
        "           lemons_y,\n",
        "           c=\"y\",\n",
        "           label=\"lemons\")\n",
        "\n",
        "slope = 0.45 / 0.5\n",
        "ax.plot(X, slope * X,linewidth=2)\n",
        "\n",
        "ax.grid()\n",
        "plt.show()\n",
        "\n",
        "print(slope)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CosBIRYAWM69",
        "outputId": "8f069af3-87a8-41c4-a55e-9c655cd44b62"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[(3.447191084581781, 5.722286657801741), (0.45190872093050705, 4.320179919630908), (4.02834047538248, 1.1238153656735834), (2.2231863120952906, 5.848485451365055), (5.954103053593453, 3.124122391310916), (0.6076605549637111, 3.756594468352435), (6.282944129769239, 1.3846732683800256), (1.1939875432788931, 3.658336544613579), (6.023550109076136, 1.31885859798298), (0.8940573062475579, 6.065845470878067)] [1, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import random\n",
        "\n",
        "oranges = list(zip(oranges_x, oranges_y))\n",
        "lemons = list(zip(lemons_x, lemons_y))\n",
        "\n",
        "# labelling oranges with 0 and lemons with 1:\n",
        "labelled_data = list(zip(oranges + lemons,\n",
        "                         [0] * len(oranges) + [1] * len(lemons)))\n",
        "random.shuffle(labelled_data)\n",
        "data, labels = zip(*labelled_data)\n",
        "\n",
        "res = train_test_split(data, labels,\n",
        "                       train_size=0.8,\n",
        "                       test_size=0.2,\n",
        "                       random_state=42)\n",
        "train_data, test_data, train_labels, test_labels = res\n",
        "print(train_data[:10], train_labels[:10])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gm4fIcSqWNAo",
        "outputId": "8756d1e0-559b-427e-a15b-5c42efc7b7a6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[('correct', 160)]\n",
            "[('correct', 40)]\n",
            "[-1.8695809   1.67766527]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from collections import Counter\n",
        "\n",
        "\n",
        "class Perceptron:\n",
        "  def __init__(self,\n",
        "               weights,\n",
        "               learning_rate=0.1):\n",
        "    \"\"\"\n",
        "    'weights' can be a numpy array, list or a tuple with the\n",
        "    actual values of the weights. The number of input values\n",
        "    is indirectly defined by the length of 'weights'\n",
        "    \"\"\"\n",
        "    self.weights = np.array(weights)\n",
        "    self.learning_rate = learning_rate\n",
        "  @staticmethod\n",
        "  def unit_step_function(x):\n",
        "    if x < 0:\n",
        "      return 0\n",
        "    else:\n",
        "      return 1\n",
        "  def __call__(self, in_data):\n",
        "    weighted_input = self.weights * in_data\n",
        "    weighted_sum = weighted_input.sum()\n",
        "    #print(in_data, weighted_input, weighted_sum)\n",
        "    return Perceptron.unit_step_function(weighted_sum)\n",
        "\n",
        "  def adjust(self,\n",
        "             target_result,\n",
        "             calculated_result,\n",
        "             in_data):\n",
        "    if type(in_data) != np.ndarray:\n",
        "      in_data = np.array(in_data) #\n",
        "      error = target_result - calculated_result\n",
        "    if error != 0:\n",
        "      correction = error * in_data * self.learning_rate\n",
        "      self.weights += correction\n",
        "      #print(target_result, calculated_result, error, in_data, correction, self.weights)\n",
        "  def evaluate(self, data, labels):\n",
        "    evaluation = Counter()\n",
        "    for index in range(len(data)):\n",
        "      label = int(round(p(data[index]),0))\n",
        "      if label == labels[index]:\n",
        "        evaluation[\"correct\"] += 1\n",
        "      else:\n",
        "        evaluation[\"wrong\"] += 1\n",
        "    return evaluation\n",
        "\n",
        "p = Perceptron(weights=[0.1, 0.1],\n",
        "               learning_rate=0.3)\n",
        "for index in range(len(train_data)):\n",
        "  p.adjust(train_labels[index],\n",
        "           p(train_data[index]),\n",
        "           train_data[index])\n",
        "  \n",
        "evaluation = p.evaluate(train_data, train_labels)\n",
        "print(evaluation.most_common())\n",
        "evaluation = p.evaluate(test_data, test_labels)\n",
        "print(evaluation.most_common())\n",
        "\n",
        "print(p.weights)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "Y3Kz0AgoWNDe",
        "outputId": "8c5cccd8-c2ad-4286-88e1-bd3c4256c68c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[-1.8695809   1.67766527]\n"
          ]
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "X = np.arange(0, 7)\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "lemons = [train_data[i] for i in range(len(train_data)) if train_labels[i] == 1]\n",
        "lemons_x, lemons_y = zip(*lemons)\n",
        "oranges = [train_data[i] for i in range(len(train_data)) if train_labels[i] == 0]\n",
        "oranges_x, oranges_y = zip(*oranges)\n",
        "\n",
        "ax.scatter(oranges_x, oranges_y, c=\"orange\")\n",
        "ax.scatter(lemons_x, lemons_y, c=\"y\")\n",
        "\n",
        "w1 = p.weights[0]\n",
        "w2 = p.weights[1]\n",
        "m = -w1 / w2\n",
        "ax.plot(X, m * X, label=\"decision boundary\")\n",
        "ax.legend()\n",
        "plt.show()\n",
        "print(p.weights)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        },
        "id": "FG1yqbrIanWR",
        "outputId": "5b824f2c-2f06-4789-9b81-597c333e2ddd"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2 -4.674372080425342 [-1.10850214 -0.23714461] (4.02834047538248, 1.1238153656735834)\n",
            "3 0.29098850040667357 [-0.44154625  1.51740103] (2.2231863120952906, 5.848485451365055)\n",
            "4 3.8399073040836256 [-2.22777717  0.58016431] (5.954103053593453, 3.124122391310916)\n",
            "7 1.1143944704702717 [-1.8695809   1.67766527] (1.1939875432788931, 3.658336544613579)\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.cm as cm\n",
        "\n",
        "p = Perceptron(weights=[0.1, 0.1],\n",
        "               learning_rate=0.3)\n",
        "number_of_colors = 7\n",
        "colors = cm.rainbow(np.linspace(0, 1, number_of_colors))\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "ax.set_xticks(range(8))\n",
        "ax.set_ylim([-2, 8])\n",
        "\n",
        "counter = 0\n",
        "for index in range(len(train_data)):\n",
        "  old_weights = p.weights.copy()\n",
        "  p.adjust(train_labels[index],\n",
        "           p(train_data[index]),\n",
        "           train_data[index])\n",
        "  if not np.array_equal(old_weights, p.weights):\n",
        "    color = \"orange\" if train_labels[index] == 0 else \"y\"\n",
        "\n",
        "    ax.scatter(train_data[index][0],\n",
        "               train_data[index][1],\n",
        "               color=color)\n",
        "    ax.annotate(str(counter),\n",
        "                (train_data[index][0], train_data[index][1]))\n",
        "    m = -p.weights[0] / p.weights[1]\n",
        "    print(index, m, p.weights, train_data[index])\n",
        "    ax.plot(X, m * X, label=str(counter), color=colors[counter])\n",
        "    counter += 1\n",
        "ax.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZBSFdX4GXT2j"
      },
      "source": [
        "#**Reseau de neurone simple**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "6L9wWvDtWCkQ",
        "outputId": "82bc51d6-0c59-497e-ab4b-2236e112c53a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xmin, xmax = -0.2, 1.4\n",
        "X = np.arange(xmin, xmax, 0.1)\n",
        "ax.scatter(0, 0, color=\"r\")\n",
        "ax.scatter(0, 1, color=\"r\")\n",
        "ax.scatter(1, 0, color=\"r\")\n",
        "ax.scatter(1, 1, color=\"g\")\n",
        "ax.set_xlim([xmin, xmax])\n",
        "ax.set_ylim([-0.1, 1.1])\n",
        "m = -1\n",
        "#ax.plot(X, m * X + 1.2, label=\"decision boundary\")\n",
        "plt.plot()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "cM-ML_p8WC7y",
        "outputId": "c76f4a97-5ee9-46c0-c8f0-20a4bdb32fb2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "execution_count": 15,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xmin, xmax = -0.2, 1.4\n",
        "X = np.arange(xmin, xmax, 0.1)\n",
        "ax.set_xlim([xmin, xmax])\n",
        "ax.set_ylim([-0.1, 1.1])\n",
        "m = -1\n",
        "for m in np.arange(0, 6, 0.1):\n",
        "  ax.plot(X, m * X )\n",
        "ax.scatter(0, 0, color=\"r\")\n",
        "ax.scatter(0, 1, color=\"r\")\n",
        "ax.scatter(1, 0, color=\"r\")\n",
        "ax.scatter(1, 1, color=\"g\")\n",
        "plt.plot()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "T0fXRMT0WKsy",
        "outputId": "03fb8912-3751-4317-dbb9-1e08775c2c0a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xmin, xmax = -0.2, 1.4\n",
        "X = np.arange(xmin, xmax, 0.1)\n",
        "ax.scatter(0, 0, color=\"r\")\n",
        "ax.scatter(0, 1, color=\"r\")\n",
        "ax.scatter(1, 0, color=\"r\")\n",
        "ax.scatter(1, 1, color=\"g\")\n",
        "ax.set_xlim([xmin, xmax])\n",
        "ax.set_ylim([-0.1, 1.1])\n",
        "m, c = -1, 1.2\n",
        "ax.plot(X, m * X + c )\n",
        "plt.plot()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "50XQqYxBWLIy"
      },
      "outputs": [],
      "source": [
        "#import numpy as np\n",
        "from collections import Counter\n",
        "\n",
        "class Perceptron:\n",
        "\n",
        "  def __init__(self,\n",
        "               weights,\n",
        "               bias=1,\n",
        "               learning_rate=0.3):\n",
        "    \"\"\"\n",
        "    'weights' can be a numpy array, list or a tuple with the\n",
        "    actual values of the weights. The number of input values\n",
        "    is indirectly defined by the length of 'weights'\n",
        "    \"\"\"\n",
        "    self.weights = np.array(weights)\n",
        "    self.bias = bias\n",
        "    self.learning_rate = learning_rate\n",
        "\n",
        "  @staticmethod\n",
        "  def unit_step_function(x):\n",
        "    if x <= 0:\n",
        "      return 0\n",
        "    else:\n",
        "      return 1\n",
        "\n",
        "  def __call__(self, in_data):\n",
        "    in_data = np.concatenate( (in_data, [self.bias]) )\n",
        "    result = self.weights @ in_data\n",
        "    return Perceptron.unit_step_function(result)\n",
        "\n",
        "  def adjust(self,target_result,in_data):\n",
        "    if type(in_data) == np.ndarray:\n",
        "      in_data = np.array(in_data) #\n",
        "      calculated_result = self(in_data)\n",
        "      error = target_result - calculated_result\n",
        "    if error != 0:\n",
        "      in_data = np.concatenate( (in_data, [self.bias]) )\n",
        "      correction = error * in_data * self.learning_rate\n",
        "      self.weights += correction\n",
        "    \n",
        "  def evaluate(self, data, labels):\n",
        "    evaluation = Counter()\n",
        "    for sample, label in zip(data, labels):\n",
        "      result = self(sample) # predict\n",
        "      if result == label:\n",
        "        evaluation[\"correct\"] += 1\n",
        "      else:\n",
        "        evaluation[\"wrong\"] += 1\n",
        "    return evaluation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "d0NBIdAwXkSi",
        "outputId": "c21de7c1-e310-4b36-ceb7-8192e4ed6b3d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Counter({'correct': 30})\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "#from perceptrons import Perceptron\n",
        "\n",
        "def labelled_samples(n):\n",
        "    for _ in range(n):\n",
        "        s = np.random.randint(0, 2, (2,))\n",
        "        yield (s, 1) if s[0] == 1 and s[1] == 1 else (s, 0)\n",
        "p = Perceptron(weights=[0.3, 0.3, 0.3], learning_rate=0.2)\n",
        "\n",
        "for in_data, label in labelled_samples(30):\n",
        "    p.adjust(label, in_data)\n",
        "\n",
        "test_data, test_labels = list(zip(*labelled_samples(30)))\n",
        "\n",
        "evaluation = p.evaluate(test_data, test_labels)\n",
        "print(evaluation)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FssV5PlJJeGi"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NO_VtG_0Xkap",
        "outputId": "fcd37ef0-3b60-4883-fb44-e726a89b5075"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "'apt-get' n’est pas reconnu en tant que commande interne\n",
            "ou externe, un programme exécutable ou un fichier de commandes.\n"
          ]
        }
      ],
      "source": [
        "!apt-get install perceptrons"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "Jgk5aJsUXkpv",
        "outputId": "7c53d25c-e1e3-4fe3-9ef8-6849e9cf069e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-3.0000000000000004 3.0000000000000013\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xmin, xmax = -0.2, 1.4\n",
        "X = np.arange(xmin, xmax, 0.1)\n",
        "ax.scatter(0, 0, color=\"r\")\n",
        "ax.scatter(0, 1, color=\"r\")\n",
        "ax.scatter(1, 0, color=\"r\")\n",
        "ax.scatter(1, 1, color=\"g\")\n",
        "ax.set_xlim([xmin, xmax])\n",
        "ax.set_ylim([-0.1, 1.1])\n",
        "m = -p.weights[0] / p.weights[1]\n",
        "c = -p.weights[2] / p.weights[1]\n",
        "print(m, c)\n",
        "ax.plot(X, m * X + c )\n",
        "plt.plot()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "hAoUc2M4nFuV",
        "outputId": "10ed87ad-92ec-4733-dffc-680ab8bed200"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.datasets import make_blobs\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "n_samples = 250\n",
        "samples, labels = make_blobs(n_samples=n_samples,\n",
        "                             centers=([2.5, 3], [6.7, 7.9]),\n",
        "                             random_state=0)\n",
        "\n",
        "colours = ('green', 'magenta', 'blue', 'cyan', 'yellow', 'red')\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "for n_class in range(2):\n",
        "    ax.scatter(samples[labels==n_class][:, 0], \n",
        "             samples[labels==n_class][:, 1],\n",
        "             c=colours[n_class], s=40, label=str(n_class))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "kYZl2wO3nFzU",
        "outputId": "e980100e-9e22-4323-8785-f9e076b60093"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Counter({'correct': 200})\n"
          ]
        }
      ],
      "source": [
        "n_learn_data = int(n_samples * 0.8) # 80 % of available data points\n",
        "learn_data, test_data = samples[:n_learn_data], samples[-n_learn_data:]\n",
        "learn_labels, test_labels = labels[:n_learn_data], labels[-n_learn_data:]\n",
        "#import Perceptron\n",
        "\n",
        "p = Perceptron(weights=[0.3, 0.3, 0.3],\n",
        "               learning_rate=0.8)\n",
        "\n",
        "for sample, label in zip(learn_data, learn_labels):\n",
        "    p.adjust(label,sample)\n",
        "\n",
        "evaluation = p.evaluate(learn_data, learn_labels)\n",
        "print(evaluation)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CWRtXFTZ0UTN",
        "outputId": "eaea4545-7ed1-4770-c649-ed70a3acf94c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "-1.5513529034664024 11.736643489707035\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "fig, ax = plt.subplots()\n",
        "\n",
        "# plotting learn data\n",
        "colours = ('green', 'blue')\n",
        "for n_class in range(2):\n",
        "    ax.scatter(learn_data[learn_labels==n_class][:, 0], \n",
        "               learn_data[learn_labels==n_class][:, 1], \n",
        "               c=colours[n_class], s=40, label=str(n_class))\n",
        "    \n",
        "# plotting test data\n",
        "colours = ('lightgreen', 'lightblue')\n",
        "for n_class in range(2):\n",
        "    ax.scatter(test_data[test_labels==n_class][:, 0], \n",
        "               test_data[test_labels==n_class][:, 1], \n",
        "               c=colours[n_class], s=40, label=str(n_class))\n",
        "    \n",
        "X = np.arange(np.max(samples[:,0]))\n",
        "m = -p.weights[0] / p.weights[1]\n",
        "c = -p.weights[2] / p.weights[1]\n",
        "print(m, c)\n",
        "ax.plot(X, m * X + c )\n",
        "plt.plot()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iQHPahLArlmf"
      },
      "source": [
        "#**Exercices**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vTjf_-dAofV6",
        "outputId": "1850f696-3868-45f6-9aa5-b7011df4cf75"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Counter({'correct': 55, 'wrong': 5})\n"
          ]
        }
      ],
      "source": [
        "#from perceptrons import Perceptron\n",
        "\n",
        "p = Perceptron(weights=[0.3, 0.3, 0.3], bias=1, learning_rate=0.2)\n",
        "\n",
        "def labelled_samples(n):\n",
        "    for _ in range(n):\n",
        "        s = np.random.random((2,))\n",
        "        yield (s, 1) if s[0] >= 0.5 and s[1] >= 0.5 else (s, 0)\n",
        "\n",
        "for in_data, label in labelled_samples(30):\n",
        "    p.adjust(label,in_data)\n",
        "\n",
        "test_data, test_labels = list(zip(*labelled_samples(60)))\n",
        "\n",
        "evaluation = p.evaluate(test_data, test_labels)\n",
        "print(evaluation)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "r1AvX3aYWNHY",
        "outputId": "a7605b3d-b360-4e45-f172-a631582ad968"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fc804636690>]"
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "ones = [test_data[i] for i in range(len(test_data)) if test_labels[i] == 1]\n",
        "zeroes = [test_data[i] for i in range(len(test_data)) if test_labels[i] == 0]\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xmin, xmax = -0.2, 1.2\n",
        "X, Y = list(zip(*ones))\n",
        "ax.scatter(X, Y, color=\"g\")\n",
        "X, Y = list(zip(*zeroes))\n",
        "ax.scatter(X, Y, color=\"r\")\n",
        "ax.set_xlim([xmin, xmax])\n",
        "ax.set_ylim([-0.1, 1.1])\n",
        "c = -p.weights[2] / p.weights[1]\n",
        "m = -p.weights[0] / p.weights[1]\n",
        "X = np.arange(xmin, xmax, 0.1)\n",
        "ax.plot(X, m * X + c, label=\"decision boundary\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "IkeWpBkB0Nys",
        "outputId": "a4c79ea4-3af8-4db2-de66-51a91d7195fe"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 1.9310309  -0.21335687 -0.9       ]\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "Counter({'correct': 484, 'wrong': 16})"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#from perceptrons import Perceptron\n",
        "import numpy as np\n",
        "from collections import Counter\n",
        "\n",
        "def labelled_samples(n):\n",
        "    for _ in range(n):\n",
        "        s = np.random.random((2,))\n",
        "        yield (s, 0) if s[0] < 0.5 else (s, 1)\n",
        "\n",
        "p = Perceptron(weights=[0.3, 0.3, 0.3],\n",
        "learning_rate=0.4)\n",
        "for in_data, label in labelled_samples(300):\n",
        "    p.adjust(label,in_data)\n",
        "\n",
        "test_data, test_labels = list(zip(*labelled_samples(500)))\n",
        "\n",
        "print(p.weights)\n",
        "p.evaluate(test_data, test_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "SEOJOOV70N9V",
        "outputId": "33ce9f52-56a3-495e-846d-0e898668013a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fc8047da550>]"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "ones = [test_data[i] for i in range(len(test_data)) if test_labels[i] == 1]\n",
        "zeroes = [test_data[i] for i in range(len(test_data)) if test_labels[i] == 0]\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "xmin, xmax = -0.2, 1.2\n",
        "X, Y = list(zip(*ones))\n",
        "ax.scatter(X, Y, color=\"g\")\n",
        "X, Y = list(zip(*zeroes))\n",
        "ax.scatter(X, Y, color=\"r\")\n",
        "ax.set_xlim([xmin, xmax])\n",
        "ax.set_ylim([-0.1, 1.1])\n",
        "c = -p.weights[2] / p.weights[1]\n",
        "m = -p.weights[0] / p.weights[1]\n",
        "X = np.arange(xmin, xmax, 0.1)\n",
        "ax.plot(X, m * X + c, label=\"decision boundary\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CBHt-0hTKu16"
      },
      "source": [
        "#### RÉSEAUX DE NEURONES, STRUCTURE, POIDS ET MATRICES"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "2bPRDoUn2Ksf",
        "outputId": "a616d5de-0e1b-4caa-9527-4ef2adb1398d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "True\n"
          ]
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "number_of_samples = 1200\n",
        "low = -1\n",
        "high = 0\n",
        "s = np.random.uniform(low, high, number_of_samples)\n",
        "\n",
        "# all values of s are within the half open interval [-1, 0) :\n",
        "print(np.all(s >= -1) and np.all(s < 0))\n",
        "\n",
        "\n",
        "plt.hist(s)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "tGHMSi5r2KvW",
        "outputId": "23c5df99-5ab8-436a-a5e1-035218088b7c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "s = np.random.binomial(100, 0.5, 1200)\n",
        "plt.hist(s)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "NkoCLztn2Kya",
        "outputId": "b970cd2d-c293-42b3-86ae-5a9af5436569"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "from scipy.stats import truncnorm\n",
        "\n",
        "s = truncnorm(a=-2/3., b=2/3., scale=1, loc=0).rvs(size=1000)\n",
        "\n",
        "plt.hist(s)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "BTF7My2iT-WM",
        "outputId": "4d4b381a-779f-4589-f322-b5592429b9f6"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "  return truncnorm(\n",
        "      (low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n",
        "\n",
        "X = truncated_normal(mean=0, sd=0.4, low=-0.5, upp=0.5)\n",
        "s = X.rvs(10000)\n",
        "\n",
        "plt.hist(s)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "LE4q5SvPT-TX",
        "outputId": "a740b926-1ab9-4873-ba0f-912525f2ee9e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 3 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "X1 = truncated_normal(mean=2, sd=1, low=1, upp=10)\n",
        "X2 = truncated_normal(mean=5.5, sd=1, low=1, upp=10)\n",
        "X3 = truncated_normal(mean=8, sd=1, low=1, upp=10)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig, ax = plt.subplots(3, sharex=True)\n",
        "ax[0].hist(X1.rvs(10000), density=True)\n",
        "ax[1].hist(X2.rvs(10000), density=True)\n",
        "ax[2].hist(X3.rvs(10000), density=True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iUB-hrtdUzEu"
      },
      "source": [
        "#### EXPLOITER UN RÉSEAU DE NEURONES AVEC PYTHON"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sN_cZLUKT-Qf"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from scipy.stats import truncnorm\n",
        "\n",
        "\n",
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "    return truncnorm(\n",
        "      (low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n",
        "\n",
        "class NeuralNetwork:\n",
        "    \n",
        "    def __init__(self, no_of_in_nodes, no_of_out_nodes, no_of_hidden_nodes, learning_rate):\n",
        "\n",
        "        self.no_of_in_nodes = no_of_in_nodes\n",
        "        self.no_of_out_nodes = no_of_out_nodes\n",
        "        self.no_of_hidden_nodes = no_of_hidden_nodes\n",
        "        self.learning_rate = learning_rate\n",
        "        self.create_weight_matrices()\n",
        "        \n",
        "    def create_weight_matrices(self):\n",
        "        rad = 1 / np.sqrt(self.no_of_in_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_in_hidden = X.rvs((self.no_of_hidden_nodes, self.no_of_in_nodes))\n",
        "        rad = 1 / np.sqrt(self.no_of_hidden_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_hidden_out = X.rvs((self.no_of_out_nodes, self.no_of_hidden_nodes))\n",
        "        \n",
        "    def train(self):\n",
        "        pass\n",
        "    def run(self):\n",
        "        pass"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFAufQsUT97I",
        "outputId": "151ec140-c155-44ad-aec1-763f87220953"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[[-0.3008158   0.57071986  0.36732523]\n",
            " [ 0.5212449  -0.57200109 -0.43502159]\n",
            " [ 0.42476745 -0.13519557 -0.40331203]\n",
            " [ 0.07575191 -0.46191844  0.15229729]]\n",
            "[[ 0.22730118 -0.25308353  0.49657278 -0.3241446 ]\n",
            " [-0.01398616 -0.17248479 -0.04892465 -0.41026607]]\n"
          ]
        }
      ],
      "source": [
        "simple_network = NeuralNetwork(no_of_in_nodes = 3, no_of_out_nodes = 2, no_of_hidden_nodes = 4, learning_rate = 0.1)\n",
        "print(simple_network.weights_in_hidden)\n",
        "print(simple_network.weights_hidden_out)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Pr70zznN2K0w",
        "outputId": "784b78f3-684d-439f-d8da-c107479e4da3"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def sigma(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "X = np.linspace(-5, 5, 100)\n",
        "\n",
        "plt.plot(X, sigma(X),'b')\n",
        "plt.xlabel('X Axis')\n",
        "plt.ylabel('Y Axis')\n",
        "plt.title('Sigmoid Function')\n",
        "\n",
        "plt.grid()\n",
        "\n",
        "plt.text(2.3, 0.84, r'$\\sigma(x)=\\frac{1}{1+e^{-x}}$', fontsize=16)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M1OfrVpC2K3o",
        "outputId": "1ce74257-9d21-428b-e72b-40e3649ae8e8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.9677045353015494\n",
            "[0.95257413 0.98201379 0.73105858]\n",
            "[0.68997448 0.90887704 0.99966465]\n"
          ]
        }
      ],
      "source": [
        "from scipy.special import expit\n",
        "print(expit(3.4))\n",
        "print(expit([3, 4, 1]))\n",
        "print(expit(np.array([0.8, 2.3, 8])))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Ox7QiYdqbNbp",
        "outputId": "bd9e029c-32b2-4a8a-d880-069059a7ad64"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def sigma(x):\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "X = np.linspace(-5, 5, 100)\n",
        "\n",
        "plt.plot(X, sigma(X))\n",
        "plt.plot(X, sigma(X) * (1 - sigma(X)))\n",
        "\n",
        "plt.xlabel('X Axis')\n",
        "plt.ylabel('Y Axis')\n",
        "plt.title('Sigmoid Function')\n",
        "\n",
        "plt.grid()\n",
        "\n",
        "plt.text(2.3, 0.84, r'$\\sigma(x)=\\frac{1}{1+e^{-x}}$', fontsize=16)\n",
        "plt.text(0.3, 0.1, r'$\\sigma\\'(x) = \\sigma(x)(1 - \\sigma(x))$', fontsize=16)\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RpY_qvt1bfS4",
        "outputId": "8a22102d-c8ac-4980-dc19-87fc8c095498"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0.95257413, 0.98201379, 0.99330715])"
            ]
          },
          "execution_count": 38,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "@np.vectorize\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.e ** -x)\n",
        "\n",
        "#sigmoid = np.vectorize(sigmoid)\n",
        "sigmoid([3, 4, 5])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TqQ635jBbfQI"
      },
      "outputs": [],
      "source": [
        "# alternative activation function\n",
        "def ReLU(x):\n",
        "    return np.maximum(0.0, x)\n",
        "\n",
        "# derivation of relu\n",
        "def ReLU_derivation(x):\n",
        "    if x <= 0:\n",
        "        return 0\n",
        "    else:\n",
        "        return 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "C3OFCk9pbrj3",
        "outputId": "bc68361b-4fdf-423d-a647-b659b7f5432d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "X = np.linspace(-5, 6, 100)\n",
        "plt.plot(X, ReLU(X),'b')\n",
        "plt.xlabel('X Axis')\n",
        "plt.ylabel('Y Axis')\n",
        "plt.title('ReLU Function')\n",
        "plt.grid()\n",
        "plt.text(0.8, 0.4, r'$ReLU(x)=max(0, x)$', fontsize=14)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iuKlmpJobrhF"
      },
      "outputs": [],
      "source": [
        "from scipy.special import expit as activation_function\n",
        "import numpy as np\n",
        "from scipy.special import expit as activation_function\n",
        "from scipy.stats import truncnorm\n",
        "\n",
        "\n",
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "    return truncnorm(\n",
        "      (low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n",
        "\n",
        "class NeuralNetwork:\n",
        "    def __init__(self, no_of_in_nodes, no_of_out_nodes, no_of_hidden_nodes, learning_rate):\n",
        "        self.no_of_in_nodes = no_of_in_nodes\n",
        "        self.no_of_out_nodes = no_of_out_nodes\n",
        "        self.no_of_hidden_nodes = no_of_hidden_nodes\n",
        "        self.learning_rate = learning_rate\n",
        "        self.create_weight_matrices()\n",
        "\n",
        "    def create_weight_matrices(self):\n",
        "        \"\"\" A method to initialize the weight matrices of the neur\n",
        "        al network\"\"\"\n",
        "        rad = 1 / np.sqrt(self.no_of_in_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_in_hidden = X.rvs((self.no_of_hidden_nodes, self.no_of_in_nodes))\n",
        "        rad = 1 / np.sqrt(self.no_of_hidden_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_hidden_out = X.rvs((self.no_of_out_nodes, self.no_of_hidden_nodes))\n",
        "\n",
        "    def train(self, input_vector, target_vector):\n",
        "        pass\n",
        "\n",
        "    def run(self, input_vector):\n",
        "        \"\"\"\n",
        "        running the network with an input vector 'input_vector'.\n",
        "        'input_vector' can be tuple, list or ndarray\n",
        "        \"\"\"\n",
        "        # turning the input vector into a column vector\n",
        "        input_vector = np.array(input_vector, ndmin=2).T\n",
        "        input_hidden = activation_function(self.weights_in_hidden @ input_vector)\n",
        "        output_vector = activation_function(self.weights_hidden_out @ input_hidden)\n",
        "        return output_vector"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7ILrDngbrel",
        "outputId": "72d5629e-3c83-4e77-a267-96b7cb7a6244"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0.62953039],\n",
              "       [0.64567053]])"
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "simple_network = NeuralNetwork(no_of_in_nodes=2, no_of_out_nodes=2, no_of_hidden_nodes=4, learning_rate=0.6)\n",
        "\n",
        "simple_network.run([(3, 4)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "URS27Mi7brbu",
        "outputId": "ae3e90b6-9870-472d-e184-63ecdc89f0aa"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "fatal: ni ceci ni aucun de ses répertoires parents n'est un dépôt git : .git\r\n"
          ]
        }
      ],
      "source": [
        "!git push -u origin master\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FKvDDPyY0UTZ"
      },
      "source": [
        "#### Retropropagation dans les reseaux de neurones et entrainer un reseau de neurones avec Python "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "swE7SEUn0UTZ"
      },
      "outputs": [],
      "source": [
        "from scipy.special import expit as activation_function\n",
        "from scipy.stats import truncnorm\n",
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "    return truncnorm((low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n",
        "\n",
        "class NeuralNetwork():\n",
        "    \n",
        "    def __init__(self, input_nodes, output_nodes, hidden_nodes, learning_rate):\n",
        "        self.input_nodes=input_nodes\n",
        "        self.output_nodes=output_nodes\n",
        "        self.hidden_nodes=hidden_nodes\n",
        "        self.learning_rate=learning_rate\n",
        "        self.create_weight_matrices()\n",
        "        \n",
        "    def create_weight_matrices(self):\n",
        "        rad = 1 / np.sqrt(self.input_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_in_hidden = X.rvs((self.hidden_nodes, self.input_nodes))\n",
        "        rad = 1 / np.sqrt(self.hidden_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_hidden_out = X.rvs((self.output_nodes, self.hidden_nodes))\n",
        "        \n",
        "    def train(self, input_vector, target_vector):\n",
        "        input_vector = np.array(input_vector)\n",
        "        input_vector = input_vector.reshape(input_vector.size, 1)\n",
        "        target_vector = np.array(target_vector).reshape(target_vector.size, 1)\n",
        "        output_vector_hidden = activation_function(self.weights_in_hidden @ input_vector)\n",
        "        output_vector_network = activation_function(self.weights_hidden_out @ output_vector_hidden)\n",
        "        output_error = target_vector - output_vector_network\n",
        "        tmp = output_error * output_vector_network * (1.0 - output_vector_network)\n",
        "        self.weights_hidden_out += self.learning_rate * (tmp @ output_vector_hidden.T)\n",
        "        hidden_errors = self.weights_hidden_out.T @ output_error\n",
        "        tmp = hidden_errors * output_vector_hidden * (1.0 - output_vector_hidden)\n",
        "        self.weights_in_hidden += self.learning_rate * (tmp @ input_vector.T)\n",
        "\n",
        "    def run(self, input_vector):\n",
        "        input_vector = np.array(input_vector)\n",
        "        input_vector = input_vector.reshape(input_vector.size, 1)\n",
        "        input4hidden = activation_function(self.weights_in_hidden @ input_vector)\n",
        "        output_vector_network = activation_function(self.weights_hidden_out @ input4hidden)\n",
        "        return output_vector_network\n",
        "\n",
        "    def evaluate(self, data, labels):\n",
        "        corrects, wrongs = 0, 0\n",
        "        for i in range(len(data)):\n",
        "            res = self.run(data[i])\n",
        "            res_max = res.argmax()\n",
        "            if res_max == labels[i].argmax():\n",
        "                corrects += 1\n",
        "            else:\n",
        "                wrongs += 1\n",
        "        return corrects, wrongs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3AQSCmfY0UTa"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import make_blobs\n",
        "n_samples = 500\n",
        "blob_centers = ([2, 6], [6, 2], [7, 7])\n",
        "n_classes = len(blob_centers)\n",
        "data, labels = make_blobs(n_samples=n_samples, centers=blob_centers, random_state=7)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qJjjSBZB0UTa",
        "outputId": "92f530d6-2882-47a1-b64a-c9eedbc67471"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# visualisons le jeu de donnees creer \n",
        "colours = ('green', 'red', \"yellow\")\n",
        "fig, ax = plt.subplots()\n",
        "for n_class in range(n_classes):\n",
        "    ax.scatter(data[labels==n_class][:, 0],\n",
        "    data[labels==n_class][:, 1],\n",
        "    c=colours[n_class],\n",
        "    s=40,\n",
        "    label=str(n_class))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2XvTZBP50UTb",
        "outputId": "c75e4329-f971-44e3-c15b-7f09af65ffd3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([2, 2, 1, 0, 2, 0, 1])"
            ]
          },
          "execution_count": 47,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# etiquette des 7 premiers enregistrements \n",
        "labels[:7]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nCjao7BW0UTb",
        "outputId": "73d19f99-d4ba-4b74-a422-a428d7e07083"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/laurette_sarah/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([[0., 0., 1.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 1., 0.]])"
            ]
          },
          "execution_count": 48,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "\n",
        "import numpy as np\n",
        "labels = np.arange(n_classes) == labels.reshape(labels.size, 1)\n",
        "labels = labels.astype(np.float)\n",
        "labels[:7]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4wxZKXxm0UTc",
        "outputId": "2faafc50-047c-4e4d-f48b-a8fe5836da9f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0., 0., 1.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.],\n",
              "       [0., 0., 1.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [1., 0., 0.],\n",
              "       [0., 0., 1.]])"
            ]
          },
          "execution_count": 49,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# maintenant nous allons creer un jeu de donnees de test et d'apprentissage \n",
        "from sklearn.model_selection import train_test_split\n",
        "res = train_test_split(data, labels,\n",
        "train_size=0.8,\n",
        "test_size=0.2,\n",
        "random_state=42)\n",
        "train_data, test_data, train_labels, test_labels = res\n",
        "train_labels[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YmHcoXEb0UTc"
      },
      "outputs": [],
      "source": [
        "#from neural_networks1 import NeuralNetwork\n",
        "simple_network = NeuralNetwork(input_nodes=2,output_nodes=3,\n",
        "hidden_nodes=5,\n",
        "learning_rate=0.3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YkxvYJp60UTd",
        "outputId": "ff1997f7-495a-454b-b689-8254fe20492d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(391, 9)"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "for i in range(len(train_data)):\n",
        "    simple_network.train(train_data[i], train_labels[i])\n",
        "simple_network.evaluate(train_data, train_labels)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xEBOe4Ux0UTd"
      },
      "source": [
        "# reseau de neurones avec noeud de polarisation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HRHzYCHm0UTd"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from scipy.stats import truncnorm\n",
        "from scipy.special import expit as activation_function\n",
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "    return truncnorm((low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n",
        "\n",
        "class NeuralNetwork():  \n",
        "    def __init__(self, input_nodes, output_nodes, hidden_nodes, learning_rate, bias=None):\n",
        "        self.input_nodes=input_nodes\n",
        "        self.output_nodes=output_nodes\n",
        "        self.hidden_nodes=hidden_nodes\n",
        "        self.learning_rate=learning_rate\n",
        "        self.bias=bias\n",
        "        self.create_weight_matrices()\n",
        "        \n",
        "    def create_weight_matrices(self):\n",
        "        bias_node = 1 if self.bias else 0\n",
        "        rad = 1 / np.sqrt(self.input_nodes + bias_node)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_in_hidden = X.rvs((self.hidden_nodes, self.input_nodes + bias_node))\n",
        "        rad = 1 / np.sqrt(self.hidden_nodes + bias_node)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_hidden_out = X.rvs((self.output_nodes, self.hidden_nodes + bias_node))\n",
        "        \n",
        "    def train(self, input_vector, target_vector):\n",
        "        input_vector = np.array(input_vector)\n",
        "        input_vector = input_vector.reshape(input_vector.size,1)\n",
        "        if self.bias:\n",
        "            input_vector = np.concatenate( (input_vector, [[self.bias]]))\n",
        "        target_vector = np.array(target_vector).reshape(target_vector.size, 1)\n",
        "        output_vector_hidden = activation_function(self.weights_in_hidden @ input_vector)\n",
        "        if self.bias:\n",
        "            output_vector_hidden = np.concatenate( (output_vector_hidden, [[self.bias]]) )\n",
        "        output_vector_network = activation_function(self.weights_hidden_out @ output_vector_hidden)\n",
        "        output_error = target_vector - output_vector_network\n",
        "        tmp = output_error * output_vector_network * (1.0 - output_vector_network)\n",
        "        self.weights_hidden_out += self.learning_rate * (tmp @ output_vector_hidden.T)\n",
        "        hidden_errors = self.weights_hidden_out.T @ output_error\n",
        "        tmp = hidden_errors * output_vector_hidden * (1.0 - output_vector_hidden)\n",
        "        if self.bias:\n",
        "            x = (tmp @input_vector.T)[:-1,:]\n",
        "        else:\n",
        "            x = tmp @ input_vector.T\n",
        "        self.weights_in_hidden += self.learning_rate * x\n",
        "        \n",
        "    def run(self, input_vector):\n",
        "        input_vector = np.array(input_vector)\n",
        "        input_vector = input_vector.reshape(input_vector.size, 1)\n",
        "        if self.bias:\n",
        "            input_vector = np.concatenate( (input_vector, [[1]]))\n",
        "        input4hidden = activation_function(self.weights_in_hidden @ input_vector)\n",
        "        if self.bias:\n",
        "            input4hidden = np.concatenate((input4hidden, [[1]]))\n",
        "        output_vector_network = activation_function(self.weights_hidden_out @ input4hidden)\n",
        "        return output_vector_network\n",
        "                                           \n",
        "    def evaluate(self, data, labels):\n",
        "        corrects, wrongs = 0, 0\n",
        "        for i in range(len(data)):\n",
        "            res = self.run(data[i])\n",
        "            res_max = res.argmax()\n",
        "            if res_max == labels[i].argmax():\n",
        "                corrects += 1\n",
        "            else:\n",
        "                wrongs += 1\n",
        "        return corrects, wrongs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xpRZSK420UTe",
        "outputId": "1cabc469-92d1-4e3e-a8d9-2bf1318d0027"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(390, 10)"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#from neural_networks2 import NeuralNetwork\n",
        "simple_network = NeuralNetwork( input_nodes=2,\n",
        "output_nodes=3,\n",
        "hidden_nodes=5,\n",
        "learning_rate=0.1,\n",
        "bias=1)\n",
        "for i in range(len(train_data)):\n",
        "    simple_network.train(train_data[i], train_labels[i])\n",
        "simple_network.evaluate(train_data, train_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dgMR21pX0UTf",
        "outputId": "269e0a6d-51d8-49ca-bf7d-41539352d677"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[244.  , 122.  ,  11.  ,   3.6 ],\n",
              "       [252.  , 101.  ,   6.  ,   4.06],\n",
              "       [237.  ,  95.  ,  12.  ,   4.06],\n",
              "       [249.  , 119.  ,   4.  ,   3.94],\n",
              "       [238.  , 100.  ,  13.  ,   3.48]])"
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c = np.loadtxt(\"strange_flowers.txt\", delimiter=\" \")\n",
        "data = c[:, :-1]\n",
        "n_classes = data.shape[1]\n",
        "labels = c[:, -1]\n",
        "data[:5]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wyTRL_r30UTf",
        "outputId": "5001edb0-8ebc-45dd-d040-9e3b1c51dd86"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/laurette_sarah/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  \n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([[0., 1., 0., 0.],\n",
              "       [0., 1., 0., 0.],\n",
              "       [0., 1., 0., 0.]])"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "labels = np.arange(n_classes) == labels.reshape(labels.size, 1)\n",
        "labels = labels.astype(np.float)\n",
        "labels[:3]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rcFtunmQ0UTg",
        "outputId": "f99bee9f-7dd8-4f28-8757-bc719b873b4e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(795, 4)"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn import preprocessing\n",
        "data = preprocessing.scale(data)\n",
        "data[:5]\n",
        "data.shape\n",
        "labels.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pOA1P2Qf0UTg",
        "outputId": "f88df4d4-b275-434c-946a-0190a7afc6a1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0., 0., 1., 0.],\n",
              "       [0., 0., 1., 0.],\n",
              "       [0., 0., 0., 1.],\n",
              "       [0., 0., 1., 0.],\n",
              "       [0., 0., 0., 1.],\n",
              "       [0., 0., 1., 0.],\n",
              "       [0., 1., 0., 0.],\n",
              "       [0., 1., 0., 0.],\n",
              "       [0., 0., 0., 1.],\n",
              "       [0., 0., 1., 0.]])"
            ]
          },
          "execution_count": 68,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "res = train_test_split(data, labels,\n",
        "train_size=0.8,\n",
        "test_size=0.2,\n",
        "random_state=42)\n",
        "train_data, test_data, train_labels, test_labels = res\n",
        "train_labels[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CJ-1rH_S0UTg",
        "outputId": "a50ac271-eee0-42a1-a80c-3cc7747e802d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(471, 165)"
            ]
          },
          "execution_count": 69,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "simple_network = NeuralNetwork(input_nodes=4, output_nodes=4, hidden_nodes=20, learning_rate=0.3)\n",
        "for i in range(len(train_data)):\n",
        "    simple_network.train(train_data[i], train_labels[i])\n",
        "simple_network.evaluate(train_data, train_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AXArMEIx0UTh"
      },
      "source": [
        "# fonction d'activation softmax"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2RXRvScg0UTh"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "def softmax(x):\n",
        "    \"\"\" applies softmax to an input x\"\"\"\n",
        "    e_x = np.exp(x)\n",
        "    return e_x / e_x.sum()\n",
        "    x = np.array([1, 0, 3, 5])\n",
        "    y = softmax(x)\n",
        "    y, x / x.sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0Xa4RZgb0UTh"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "def softmax(x):\n",
        "    \"\"\" applies softmax to an input x\"\"\"\n",
        "    e_x = np.exp(x - np.max(x))\n",
        "    return e_x / e_x.sum()\n",
        "    softmax(x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HcHK-Xv-0UTi"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "def softmax(x):\n",
        "    e_x = np.exp(x)\n",
        "    return e_x / e_x.sum()\n",
        "    s = softmax(np.array([0, 4, 5]))\n",
        "    si_sj = - s * s.reshape(3, 1)\n",
        "    print(s)\n",
        "    print(si_sj)\n",
        "    s_der = np.diag(s) + si_sj\n",
        "    s_der"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ODHY8Nao0UTi"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from scipy.stats import truncnorm\n",
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "    return truncnorm((low - mean) / sd, (upp - mean) / sd, loc=mean, scale=sd)\n",
        "@np.vectorize\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.e ** -x)\n",
        "def softmax(x):\n",
        "    e_x = np.exp(x)\n",
        "    return e_x / e_x.sum()\n",
        "class NeuralNetwork:\n",
        "    def __init__(self,\n",
        "no_of_in_nodes,\n",
        "no_of_out_nodes,\n",
        "no_of_hidden_nodes,\n",
        "learning_rate,\n",
        "softmax=True):\n",
        "        self.no_of_in_nodes = no_of_in_nodes\n",
        "        self.no_of_out_nodes = no_of_out_nodes\n",
        "        self.no_of_hidden_nodes = no_of_hidden_nodes\n",
        "        self.learning_rate = learning_rate\n",
        "        self.softmax = softmax\n",
        "        self.create_weight_matrices()\n",
        "    def create_weight_matrices(self):\n",
        "        \"\"\" A method to initialize the weight matrices of the neur\n",
        "        al network\"\"\"\n",
        "        rad = 1 / np.sqrt(self.no_of_in_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_in_hidden = X.rvs((self.no_of_hidden_nodes,self.no_of_in_nodes))\n",
        "        rad = 1 / np.sqrt(self.no_of_hidden_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.weights_hidden_out = X.rvs((self.no_of_out_nodes,\n",
        "        self.no_of_hidden_nodes))\n",
        "    def train(self, input_vector, target_vector):\n",
        "        \"\"\"\n",
        "        input_vector and target_vector can be tuples, lists or nda\n",
        "        rrays\n",
        "        \"\"\"\n",
        "        # make sure that the vectors have the right shape\n",
        "        input_vector = np.array(input_vector)\n",
        "        input_vector = input_vector.reshape(input_vector.size, 1)\n",
        "        target_vector = np.array(target_vector).reshape(target_vector.size, 1)\n",
        "        output_vector_hidden = sigmoid(self.weights_in_hidden @ input_vector)\n",
        "        if self.softmax:\n",
        "            output_vector_network = softmax(self.weights_hidden_out @ output_vector_hidden)\n",
        "        else:\n",
        "            output_vector_network = sigmoid(self.weights_hidden_out @ output_vector_hidden)\n",
        "            output_error = target_vector - output_vector_network\n",
        "        if self.softmax:\n",
        "            ovn = output_vector_network.reshape(output_vector_netwrk.size,)\n",
        "            si_sj = - ovn * ovn.reshape(self.no_of_out_nodes, 1)\n",
        "            s_der = np.diag(ovn) + si_sj\n",
        "            tmp = s_der @ output_error\n",
        "            self.weights_hidden_out += self.learning_rate * (tmp\n",
        "            @ output_vector_hidden.T)\n",
        "        else:\n",
        "            tmp = output_error * output_vector_network * (1.0 - output_vector_network)\n",
        "            self.weights_hidden_out += self.learning_rate * (tmp@ output_vector_hidden.T)\n",
        "            \n",
        "            # calculate hidden errors:\n",
        "            hidden_errors = self.weights_hidden_out.T @ output_error\n",
        "            # update the weights:\n",
        "            tmp = hidden_errors * output_vector_hidden * (1.0 - output_vector_hidden)\n",
        "            self.weights_in_hidden += self.learning_rate * (tmp @ input_vector.T)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zFcTYQzC0UTj"
      },
      "outputs": [],
      "source": [
        "\n",
        "def run(self, input_vector):\n",
        "    \"\"\"\n",
        "    running the network with an input vector 'input_vector'.\n",
        "    'input_vector' can be tuple, list or ndarray\n",
        "    \"\"\"\n",
        "# make sure that input_vector is a column vector:\n",
        "    input_vector = np.array(input_vector)\n",
        "    input_vector = input_vector.reshape(input_vector.size, 1)\n",
        "    input4hidden = sigmoid(self.weights_in_hidden @ input_vector)\n",
        "    if self.softmax:\n",
        "        output_vector_network = softmax(self.weights_hidden_out @ input4hidden)\n",
        "    else:\n",
        "        output_vector_network = sigmoid(self.weights_hidden_out @ input4hidden)\n",
        "    return output_vector_network\n",
        "def evaluate(self, data, labels):\n",
        "    corrects, wrongs = 0, 0\n",
        "    for i in range(len(data)):\n",
        "        res = self.run(data[i])\n",
        "        res_max = res.argmax()\n",
        "        if res_max == labels[i]:\n",
        "            corrects += 1\n",
        "        else:\n",
        "            wrongs += 1\n",
        "    return corrects, wrongs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GJD9_IkC0UTj"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import make_blobs\n",
        "n_samples = 300\n",
        "samples, labels = make_blobs(n_samples=n_samples,\n",
        "centers=([2, 6], [6, 2]),\n",
        "random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jowGyftM0UTk",
        "outputId": "b2db8b65-1068-47aa-b836-57986a1e0032"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "colours = ('green', 'red', 'blue', 'magenta', 'yellow', 'cyan')\n",
        "fig, ax = plt.subplots()\n",
        "for n_class in range(2):\n",
        "    ax.scatter(samples[labels==n_class][:, 0], samples[labels==n_class][:, 1],\n",
        "    c=colours[n_class], s=40, label=str(n_class))\n",
        "    size_of_learn_sample = int(n_samples * 0.8)\n",
        "    learn_data = samples[:size_of_learn_sample]\n",
        "    test_data = samples[-size_of_learn_sample:]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xpl3Kbgr0UTk"
      },
      "outputs": [],
      "source": [
        "#from neural_networks_softmax import NeuralNetwork\n",
        "simple_network = NeuralNetwork(no_of_in_nodes=2,\n",
        "no_of_out_nodes=2,\n",
        "no_of_hidden_nodes=5,\n",
        "learning_rate=0.3,\n",
        "softmax=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8SPfcrsh0UTl",
        "outputId": "e5937534-17a1-4bb4-ae25-fc879e64babb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(1, 4) <__main__.NeuralNetwork object at 0x7fc8029249d0> -0.41440359460510856\n",
            "(2, 6) <__main__.NeuralNetwork object at 0x7fc8029249d0> -0.41440359460510856\n",
            "(3, 3) <__main__.NeuralNetwork object at 0x7fc8029249d0> -0.41440359460510856\n",
            "(6, 2) <__main__.NeuralNetwork object at 0x7fc8029249d0> -0.41440359460510856\n"
          ]
        }
      ],
      "source": [
        "for x in [(1, 4), (2, 6), (3, 3), (6, 2)]:\n",
        "    y = simple_network\n",
        "    print(x, y, s.sum())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dzFmDrZ80UTl"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "cm = np.array(\n",
        "[[5825, 1, 49, 23, 7, 46, 30, 12, 21, 26],\n",
        "[ 1, 6654, 48, 25, 10, 32, 19, 62, 111, 10],\n",
        "[ 2, 20, 5561, 69, 13, 10, 2, 45, 18, 2],\n",
        "[ 6, 26, 99, 5786, 5, 111, 1, 41, 110, 79],\n",
        "[ 4, 10, 43, 6, 5533, 32, 11, 53, 34, 79],\n",
        "[ 3, 1, 2, 56, 0, 4954, 23, 0, 12, 5],\n",
        "[ 31, 4, 42, 22, 45, 103, 5806, 3, 34, 3],\n",
        "[ 0, 4, 30, 29, 5, 6, 0, 5817, 2, 28],\n",
        "[ 35, 6, 63, 58, 8, 59, 26, 13, 5394, 24],\n",
        "[ 16, 16, 21, 57, 216, 68, 0, 219, 115, 5693]])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QcJSjzzC0UTl"
      },
      "outputs": [],
      "source": [
        "def precision(label, confusion_matrix):\n",
        "    col = confusion_matrix[:, label]\n",
        "    return confusion_matrix[label, label] / col.sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "geqIm7Ez0UTm"
      },
      "outputs": [],
      "source": [
        "def recall(label, confusion_matrix):\n",
        "    row = confusion_matrix[label, :]\n",
        "    return confusion_matrix[label, label] / row.sum()\n",
        "def precision_macro_average(confusion_matrix):\n",
        "    rows, columns = confusion_matrix.shape\n",
        "    sum_of_precisions = 0\n",
        "    for label in range(rows):\n",
        "        sum_of_precisions += precision(label, confusion_matrix)\n",
        "    return sum_of_precisions / rows\n",
        "def recall_macro_average(confusion_matrix):\n",
        "    rows, columns = confusion_matrix.shape\n",
        "    sum_of_recalls = 0\n",
        "    for label in range(columns):\n",
        "        sum_of_recalls += recall(label, confusion_matrix)\n",
        "    return sum_of_recalls / columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Au6qXcJQ0UTm",
        "outputId": "216fac87-e1ec-4144-b1eb-566919bd7279"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "label precision recall\n",
            "    0     0.983  0.964\n",
            "    1     0.987  0.954\n",
            "    2     0.933  0.968\n",
            "    3     0.944  0.924\n",
            "    4     0.947  0.953\n",
            "    5     0.914  0.980\n",
            "    6     0.981  0.953\n",
            "    7     0.928  0.982\n",
            "    8     0.922  0.949\n",
            "    9     0.957  0.887\n"
          ]
        }
      ],
      "source": [
        "print(\"label precision recall\")\n",
        "for label in range(10):\n",
        "    print(f\"{label:5d} {precision(label, cm):9.3f} {recall(label,cm):6.3f}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7g1KDATy0UTn",
        "outputId": "05ad769a-1af2-4090-ad4f-6c991fa7a69d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "precision total: 0.9496885564052286\n",
            "recall total: 0.9514531547877969\n"
          ]
        }
      ],
      "source": [
        "print(\"precision total:\", precision_macro_average(cm))\n",
        "print(\"recall total:\", recall_macro_average(cm))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YlHcng900UTn"
      },
      "outputs": [],
      "source": [
        "def accuracy(confusion_matrix):\n",
        "    diagonal_sum = confusion_matrix.trace()\n",
        "    sum_of_all_elements = confusion_matrix.sum()\n",
        "    return diagonal_sum / sum_of_all_element"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6U2Vr0_w0UTn"
      },
      "source": [
        "#### Reseaux de neurones avec le jeu de donnees mnist  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W6MXFwml0UTo",
        "outputId": "5075dfb8-209b-4a2d-c0e5-855f08bcb94d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Populating the interactive namespace from numpy and matplotlib\n",
            "/home/laurette_sarah/Bureau/cours l3 /TP_INF3236_ML/apprentissage_artificiel_groupe_2-20220425T101848Z-001\n",
            "/home/laurette_sarah/Bureau/cours l3 /TP_INF3236_ML/apprentissage_artificiel_groupe_2-20220425T101848Z-001/data2\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/laurette_sarah/anaconda3/lib/python3.7/site-packages/IPython/core/magics/pylab.py:160: UserWarning: pylab import has clobbered these variables: ['random', 'step', 'ones', 'cm', 'sample', 'size', 'repeat', 'shuffle']\n",
            "`%matplotlib` prevents importing * from pylab and numpy\n",
            "  \"\\n`%matplotlib` prevents importing * from pylab and numpy\"\n"
          ]
        }
      ],
      "source": [
        "# check for existence os.path.exists(root_dir) os.path.exists(data_dir) os.path.exists(sub_dir)\n",
        "%pylab inline\n",
        "import os\n",
        "root_dir = os.path.abspath(\"/home/laurette_sarah/Bureau/cours l3 /TP_INF3236_ML/apprentissage_artificiel_groupe_2-20220425T101848Z-001/\") \n",
        "print(root_dir)\n",
        "data_dir = os.path.join(root_dir, 'data2') \n",
        "print(data_dir)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AzoNhqlG0UTo"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "train = pd.read_csv(os.path.join(data_dir, 'mnist_train.csv'))\n",
        "test = pd.read_csv(os.path.join(data_dir, 'mnist_test.csv'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sf1JGSEs0UTo",
        "outputId": "cf852efa-960b-4679-bf22-48f54f30e802"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 5.19437349,  0.88168808],\n",
              "       [-0.03068447,  8.06449286],\n",
              "       [ 1.044055  ,  5.65401822],\n",
              "       [ 4.72031083,  1.4145688 ],\n",
              "       [ 6.45741561,  1.03538799],\n",
              "       [ 4.31878178,  1.11102864],\n",
              "       [ 3.63041309,  2.8640523 ],\n",
              "       [ 1.3563816 ,  3.77659685],\n",
              "       [ 1.86711942,  5.70220912],\n",
              "       [ 3.17877957,  5.82007516]])"
            ]
          },
          "execution_count": 95,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_data[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Cnj3xF9W0UTp",
        "outputId": "4e7ff7ec-28d5-4940-d85a-68cbc91e58f3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(240, 2)"
            ]
          },
          "execution_count": 96,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_data[test_data==255]\n",
        "test_data.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PZHiTu7j0UTp"
      },
      "source": [
        "Nous mapperons ces valeurs dans un intervalle de [0.01, 1] en multipliant chaque pixel par 0.99 / 255 et en ajoutant 0,01 au résultat. De cette façon, nous évitons les valeurs 0 comme entrées, qui sont capables d'empêcher\n",
        "mises à jour de poids"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cRnkxu7f0UTp"
      },
      "outputs": [],
      "source": [
        "fac = 0.99 / 255\n",
        "train_imgs = np.asfarray(train_data[:, 1:]) * fac + 0.01\n",
        "test_imgs = np.asfarray(test_data[:, 1:]) * fac + 0.01\n",
        "train_labels = np.asfarray(train_data[:, :1])\n",
        "test_labels = np.asfarray(test_data[:, :1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nE1EAbmz0UTq",
        "outputId": "64f2d467-ad9f-4240-b2c2-47a3aa2ad573"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "label:  0  in one-hot representation:  [1 0 0 0 0 0 0 0 0 0]\n",
            "label:  1  in one-hot representation:  [0 1 0 0 0 0 0 0 0 0]\n",
            "label:  2  in one-hot representation:  [0 0 1 0 0 0 0 0 0 0]\n",
            "label:  3  in one-hot representation:  [0 0 0 1 0 0 0 0 0 0]\n",
            "label:  4  in one-hot representation:  [0 0 0 0 1 0 0 0 0 0]\n",
            "label:  5  in one-hot representation:  [0 0 0 0 0 1 0 0 0 0]\n",
            "label:  6  in one-hot representation:  [0 0 0 0 0 0 1 0 0 0]\n",
            "label:  7  in one-hot representation:  [0 0 0 0 0 0 0 1 0 0]\n",
            "label:  8  in one-hot representation:  [0 0 0 0 0 0 0 0 1 0]\n",
            "label:  9  in one-hot representation:  [0 0 0 0 0 0 0 0 0 1]\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/laurette_sarah/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        }
      ],
      "source": [
        "# utiliser le one out encoding pour changer l'encodage des valeurs et avoir un seul pixel qui change au n de la rep \n",
        "lr = np.arange(10)\n",
        "for label in range(10):\n",
        "    one_hot = (lr==label).astype(np.int)\n",
        "    print(\"label: \", label, \" in one-hot representation: \", one_hot)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IMW7krBq0UTq",
        "outputId": "2644f4e4-f5f3-4854-fd36-374494501ec6"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/laurette_sarah/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/home/laurette_sarah/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  after removing the cwd from sys.path.\n"
          ]
        }
      ],
      "source": [
        "lr = np.arange(no_of_different_labels)\n",
        "# tranformer les etiquettes one hot representation\n",
        "train_labels_one_hot = (lr==train_labels).astype(np.float)\n",
        "test_labels_one_hot = (lr==test_labels).astype(np.float)\n",
        "# on retire les o et 1 dans les etiquettes:\n",
        "train_labels_one_hot[train_labels_one_hot==0] = 0.01\n",
        "train_labels_one_hot[train_labels_one_hot==1] = 0.99\n",
        "test_labels_one_hot[test_labels_one_hot==0] = 0.01\n",
        "test_labels_one_hot[test_labels_one_hot==1] = 0.99"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RPSvvPUw0UTr",
        "outputId": "7769ae5f-e10a-4d46-9453-71d70c369bb1"
      },
      "outputs": [
        {
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-129-189418cf957b>, line 1)",
          "output_type": "error",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-129-189418cf957b>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    img = train_imgs[i].reshape((28,28)28)\u001b[0m\n\u001b[0m                                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        " img = train_imgs[i].reshape((28,28))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M9UIE-U10UTr"
      },
      "outputs": [],
      "source": [
        "img = train_imgs[i]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6cW3v8se0UTr",
        "outputId": "2881748d-07f5-44a4-ba15-915d569afe19"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0.00821856, 0.00856283, 0.00812385])"
            ]
          },
          "execution_count": 127,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "img"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h3TcgulU0UTs"
      },
      "outputs": [],
      "source": [
        "DUMPING DES DONNÉES POUR UN RECHARGEMENT PLUS RAPIDE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oWTFtFBq0UTs"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "@np.vectorize\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + np.e ** -x)\n",
        "activation_function = sigmoid\n",
        "\n",
        "from scipy.stats import truncnorm\n",
        "\n",
        "def truncated_normal(mean=0, sd=1, low=0, upp=10):\n",
        "    return truncnorm((low - mean) / sd, \n",
        "                     (upp - mean) / sd, \n",
        "                     loc=mean, \n",
        "                     scale=sd)\n",
        "\n",
        "\n",
        "class NeuralNetwork:\n",
        "    \n",
        "    def __init__(self, \n",
        "                 no_of_in_nodes, \n",
        "                 no_of_out_nodes, \n",
        "                 no_of_hidden_nodes,\n",
        "                 learning_rate):\n",
        "        self.no_of_in_nodes = no_of_in_nodes\n",
        "        self.no_of_out_nodes = no_of_out_nodes\n",
        "        self.no_of_hidden_nodes = no_of_hidden_nodes\n",
        "        self.learning_rate = learning_rate \n",
        "        self.create_weight_matrices()\n",
        "        \n",
        "    def create_weight_matrices(self):\n",
        "        \"\"\" \n",
        "        A method to initialize the weight \n",
        "        matrices of the neural network\n",
        "        \"\"\"\n",
        "        rad = 1 / np.sqrt(self.no_of_in_nodes)\n",
        "        X = truncated_normal(mean=0, \n",
        "                             sd=1, \n",
        "                             low=-rad, \n",
        "                             upp=rad)\n",
        "        self.wih = X.rvs((self.no_of_hidden_nodes, \n",
        "                                       self.no_of_in_nodes))\n",
        "        rad = 1 / np.sqrt(self.no_of_hidden_nodes)\n",
        "        X = truncated_normal(mean=0, sd=1, low=-rad, upp=rad)\n",
        "        self.who = X.rvs((self.no_of_out_nodes, \n",
        "                                         self.no_of_hidden_nodes))\n",
        "        \n",
        "    \n",
        "    def train(self, input_vector, target_vector):\n",
        "        \"\"\"\n",
        "        input_vector and target_vector can \n",
        "        be tuple, list or ndarray\n",
        "        \"\"\"\n",
        "        \n",
        "        input_vector = np.array(input_vector, ndmin=2).T\n",
        "        target_vector = np.array(target_vector, ndmin=2).T\n",
        "        \n",
        "        output_vector1 = np.dot(self.wih, \n",
        "                                input_vector)\n",
        "        output_hidden = activation_function(output_vector1)\n",
        "        \n",
        "        output_vector2 = np.dot(self.who, \n",
        "                                output_hidden)\n",
        "        output_network = activation_function(output_vector2)\n",
        "        \n",
        "        output_errors = target_vector - output_network\n",
        "        # update the weights:\n",
        "        tmp = output_errors * output_network \\\n",
        "              * (1.0 - output_network)     \n",
        "        tmp = self.learning_rate  * np.dot(tmp, \n",
        "                                           output_hidden.T)\n",
        "        self.who += tmp\n",
        "\n",
        "\n",
        "        # calculate hidden errors:\n",
        "        hidden_errors = np.dot(self.who.T, \n",
        "                               output_errors)\n",
        "        # update the weights:\n",
        "        tmp = hidden_errors * output_hidden * \\\n",
        "              (1.0 - output_hidden)\n",
        "        self.wih += self.learning_rate \\\n",
        "                          * np.dot(tmp, input_vector.T)\n",
        "        \n",
        "\n",
        "        \n",
        "    \n",
        "    def run(self, input_vector):\n",
        "        # input_vector can be tuple, list or ndarray\n",
        "        input_vector = np.array(input_vector, ndmin=2).T\n",
        "\n",
        "        output_vector = np.dot(self.wih, \n",
        "                               input_vector)\n",
        "        output_vector = activation_function(output_vector)\n",
        "        \n",
        "        output_vector = np.dot(self.who, \n",
        "                               output_vector)\n",
        "        output_vector = activation_function(output_vector)\n",
        "    \n",
        "        return output_vector\n",
        "            \n",
        "    def confusion_matrix(self, data_array, labels):\n",
        "        cm = np.zeros((10, 10), int)\n",
        "        for i in range(len(data_array)):\n",
        "            res = self.run(data_array[i])\n",
        "            res_max = res.argmax()\n",
        "            target = labels[i][0]\n",
        "            cm[res_max, int(target)] += 1\n",
        "        return cm    \n",
        "\n",
        "    def precision(self, label, confusion_matrix):\n",
        "        col = confusion_matrix[:, label]\n",
        "        return confusion_matrix[label, label] / col.sum()\n",
        "    \n",
        "    def recall(self, label, confusion_matrix):\n",
        "        row = confusion_matrix[label, :]\n",
        "        return confusion_matrix[label, label] / row.sum()\n",
        "        \n",
        "    \n",
        "    def evaluate(self, data, labels):\n",
        "        corrects, wrongs = 0, 0\n",
        "        for i in range(len(data)):\n",
        "            res = self.run(data[i])\n",
        "            res_max = res.argmax()\n",
        "            if res_max == labels[i]:\n",
        "                corrects += 1\n",
        "            else:\n",
        "                wrongs += 1\n",
        "        return corrects, wrongs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JJuNoBAc0UTt"
      },
      "outputs": [],
      "source": [
        "ANN = NeuralNetwork(no_of_in_nodes = image_pixels, \n",
        "                    no_of_out_nodes = 10, \n",
        "                    no_of_hidden_nodes = 100,\n",
        "                    learning_rate = 0.1)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "groupe_7_TP6.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}